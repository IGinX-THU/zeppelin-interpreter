import traceback
import numpy as np
from sentence_transformers import SentenceTransformer
from datetime import datetime
import time
from pymilvus import Collection, CollectionSchema, FieldSchema, DataType, connections, utility


class MilvusClient:
    def __init__(self, host, port):
        try:
            print(f"正在连接 Milvus 数据库，地址：{host}:{port}...")
            connections.connect(alias='default', host=host, port=port)
            print("Milvus连接成功")
        except Exception as e:
            print(f"连接失败: {str(e)}")
            print("详细错误信息：")
            traceback.print_exc()
            raise

    def create_collection(self, table_name):
        if utility.has_collection(table_name):
            return Collection(name=table_name)

        fields = [
            FieldSchema(name="id", dtype=DataType.INT64, is_primary=True, auto_id=True),
            FieldSchema(name="path", dtype=DataType.VARCHAR, max_length=255),
            FieldSchema(name="embedding", dtype=DataType.FLOAT_VECTOR, dim=768)
        ]
        schema = CollectionSchema(fields, description="embedding collection")
        collection = Collection(name=table_name, schema=schema)
        self.create_index(table_name)
        return collection

    def insert(self, table_name, path, embedding):
        collection = self.create_collection(table_name)
        insert_data = [[path], [embedding]]  # path 和 embedding 分别为一个 list
        insert_result = collection.insert(insert_data)
        return insert_result.primary_keys

    def insert_batch(self, table_name, data):
        collection = self.create_collection(table_name)
        paths, embeddings = zip(*data)
        # todo: 如果最先没有全部删除的话，这里要过滤掉path重复的？
        insert_result = collection.insert([paths, np.array(embeddings).tolist()])
        collection.compact()
        return insert_result.primary_keys

    def create_index(self, table_name):
        collection = Collection(name=table_name)
        index_params = {"index_type": "IVF_FLAT", "metric_type": "L2", "params": {"nlist": 128}}
        collection.create_index(field_name="embedding", index_params=index_params)
        index_params_path = {"index_type": "Trie", "params": {}}
        collection.create_index(field_name="path", index_params=index_params_path)

    def search_by_path(self, path, table_name):
        collection = self.create_collection(table_name)
        query = f'path == "{path}"'
        results = collection.query(expr=query, output_fields=["embedding"])
        return results  # 如果路径已经存在，返回结果；否则返回空列表

    def delete_all(self, table_name):
        collection = self.create_collection(table_name)
        # 查询所有 id 主键
        result = collection.query("id >= 0")  # 这里只是查询 id 字段，获取所有记录的 id
        # 提取所有 id
        ids = [item['id'] for item in result]  # 如果 result 是列表，直接遍历
        # 执行删除操作，批量删除
        if ids:
            expr = f"id in {ids}"  # 构建删除条件
            collection.delete(expr=expr)  # 执行删除
        collection.compact()

    def query_all(self, table_name):
        collection = self.create_collection(table_name)
        collection.load()
        result = collection.query("id >= 0")
        return len(result)


class ModelUtils:
    _model_instance = None

    @classmethod
    def _load_model(cls, model_path="bert-base-chinese"):
        if cls._model_instance is None:
            cls._model_instance = SentenceTransformer(model_path)
            print("load model finish")
            print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

    @classmethod
    def get_embedding(cls, text):
        cls._load_model()
        if text is None:
            raise ValueError("Input text is None")
        embedding = cls._model_instance.encode(text)
        return np.array(embedding)  # 确保返回的是 numpy 数组


class Node:
    def __init__(self, path='', value=None, children=None, embedding=None):
        self.path = path
        self.value = value
        self.children = children if children else {}
        self.embedding = embedding if embedding else np.array([])  # 使用 numpy 数组
        self.connection = ''

    def __repr__(self):
        return f"Node(path={self.path}, value={self.value}, children={len(self.children)}, embedding={self.embedding[:3]}...)"

    def insert_path(self, path):
        current_node = self
        for part in path:
            if part not in current_node.children:
                new_node = Node(path=f"{current_node.path}.{part}" if current_node.path else part, value=part)
                current_node.children[part] = new_node
            current_node = current_node.children[part]

    def calculate_weighted_embedding(self, x=0.7, parent_value=None, data_to_insert=None):
        if self.embedding.size > 0:  # 如果 embedding 已存在且非空
            return self.embedding

        if not self.children:
            description = f"\"{parent_value}\"数据中的\"{self.value}\"属性" if parent_value else self.value
            self.embedding = ModelUtils.get_embedding(description)
            data_to_insert.append((self.path, self.embedding))
            return self.embedding

        if parent_value:
            description = f"\"{parent_value}\"数据中的\"{self.value}\"数据"
        else:
            description = self.value

        child_embeddings = [child.calculate_weighted_embedding(x, self.value, data_to_insert) for child in self.children.values()]
        avg_child_embedding = np.mean(child_embeddings, axis=0)

        self_value_embedding = ModelUtils.get_embedding(description)
        weighted_self_embedding = self_value_embedding * x
        weighted_child_embedding = avg_child_embedding * (1 - x)

        self.embedding = weighted_self_embedding + weighted_child_embedding
        data_to_insert.append((self.path, self.embedding))
        return self.embedding

    def print_tree(self, level=0):
        print(" " * level * 2 + f"{self.path}: {self.value} | Embedding: {self.embedding[:3]}...")
        for child in self.children.values():
            child.print_tree(level + 1)


class UDFStoreEmbedding:
    def __init__(self):
        self.milvus_host = '127.0.0.1'
        # self.milvus_host = '47.106.154.179'
        self.milvus_port = 19530
        self.table_name = 'data_embedding'

    def transform(self, data, args, kvargs):
        print("enter transform StoreEmbedding success")
        print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        if kvargs.get("host"):
            self.milvus_host = kvargs["host"].decode("utf-8")
        if kvargs.get("port"):
            self.milvus_port = int(kvargs["port"].decode("utf-8"))

        milvus_client = MilvusClient(self.milvus_host, self.milvus_port)

        root = Node(value='数据资产')
        paths = [row[1] for row in data[2:]]

        for path in paths:
            decoded_path = path.decode('utf-8')
            path_parts = decoded_path.split('.')
            root.insert_path(path_parts)
        print("finish insert path")
        print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

        data_to_insert = []
        for child in root.children.values():
            child.calculate_weighted_embedding(x=0.8, data_to_insert=data_to_insert)
        print("finish calculate embedding")
        print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        # root.print_tree()

        len1 = milvus_client.query_all(self.table_name)
        print("最初的数量为: " + str(len1))

        milvus_client.delete_all(self.table_name)

        time.sleep(5)
        len2 = milvus_client.query_all(self.table_name)
        print("删除后的数量为: " + str(len2))

        milvus_client.insert_batch(self.table_name, data_to_insert)  # 一次性插入所有数据
        print("finish insert batch embeddings")
        print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

        time.sleep(5)
        len3 = milvus_client.query_all(self.table_name)
        print("重新插入后的数量为: " + str(len3))

        result = [['(result)'], ['BINARY'], ["success"]]
        print("finish generate result")
        print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

        return result

# # 测试数据
# data = [['key', 'path', 'type'], ['LONG', 'BINARY', 'BINARY'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe7\x81\xbe\xe6\x83\x85\xe6\x95\xb0\xe6\x8d\xae.\xe5\x9c\xb0\xe7\x82\xb9', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe7\x81\xbe\xe6\x83\x85\xe6\x95\xb0\xe6\x8d\xae.\xe5\xbc\xba\xe5\xba\xa6', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe7\x81\xbe\xe6\x83\x85\xe6\x95\xb0\xe6\x8d\xae.\xe6\x8d\x9f\xe5\xa4\xb1', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe7\x9f\xa2\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe5\x80\xbe\xe5\x80\x92\xe5\x8c\xba\xe4\xbd\x8d\xe7\xbd\xae', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe7\x9f\xa2\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe5\x80\xbe\xe5\x80\x92\xe5\x8c\xba\xe8\x8c\x83\xe5\x9b\xb4', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe7\x9f\xa2\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe5\xba\x95\xe7\xae\xa1\xe7\xba\xbf\xe6\xb7\xb1\xe5\xba\xa6', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe7\x9f\xa2\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe5\xba\x95\xe7\xae\xa1\xe7\xba\xbf\xe9\x95\xbf\xe5\xba\xa6', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe9\x81\xa5\xe6\x84\x9f\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe5\x86\xb0\xe8\xa6\x86\xe7\x9b\x96', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe9\x81\xa5\xe6\x84\x9f\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\xa2\x9c\xe8\x89\xb2', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe9\x81\xa5\xe6\x84\x9f\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7\xe7\x8e\xaf\xe5\xa2\x83\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb0\x94\xe6\xba\xb6\xe8\x83\xb6\xe5\x85\x89\xe5\xad\xa6\xe5\x8e\x9a\xe5\xba\xa6', b'LONG'], [-1, b'\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7\xe7\x8e\xaf\xe5\xa2\x83\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb0\xb4\xe4\xbd\x93\xe6\xbc\xab\xe5\x8f\x8d\xe5\xb0\x84', b'LONG'], [-1, b'\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7\xe7\x8e\xaf\xe5\xa2\x83\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb0\xb4\xe9\x80\x8f\xe6\x98\x8e\xe5\xba\xa6', b'LONG'], [-1, b'\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7\xe7\x8e\xaf\xe5\xa2\x83\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe8\xa1\xa8\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe4\xb8\x9c\xe5\x8d\x97\xe5\x8d\xb0\xe5\xba\xa6\xe6\xb4\x8bROMS\xe6\xa8\xa1\xe6\x8b\x9f\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb5\xb7\xe5\xb9\xb3\xe9\x9d\xa2\xe9\xab\x98\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe4\xb8\x9c\xe5\x8d\x97\xe5\x8d\xb0\xe5\xba\xa6\xe6\xb4\x8bROMS\xe6\xa8\xa1\xe6\x8b\x9f\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb5\xb7\xe6\xb5\x81', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe4\xb8\x9c\xe5\x8d\x97\xe5\x8d\xb0\xe5\xba\xa6\xe6\xb4\x8bROMS\xe6\xa8\xa1\xe6\x8b\x9f\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe4\xb8\x9c\xe5\x8d\x97\xe5\x8d\xb0\xe5\xba\xa6\xe6\xb4\x8bROMS\xe6\xa8\xa1\xe6\x8b\x9f\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\x9b\x90\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xb1\x82\xe7\xbb\x93\xe6\xa0\xbc\xe7\x82\xb9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe5\xaf\x86\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xb1\x82\xe7\xbb\x93\xe6\xa0\xbc\xe7\x82\xb9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb5\xae\xe5\x8a\x9b\xe9\xa2\x91\xe7\x8e\x87', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xa0\xbc\xe7\x82\xb9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb5\xb7\xe6\xb0\x94\xe9\x80\x9a\xe9\x87\x8f', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xa0\xbc\xe7\x82\xb9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb5\xb7\xe6\xb5\x81', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xa0\xbc\xe7\x82\xb9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xa0\xbc\xe7\x82\xb9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\x83\xad\xe5\x90\xab\xe9\x87\x8f', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xa0\xbc\xe7\x82\xb9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\x9b\x90\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x8c\x97\xe5\x86\xb0\xe6\xb4\x8b\xe5\x8d\xab\xe6\x98\x9f\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe5\x86\xb0\xe5\xaf\x86\xe9\x9b\x86\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x8c\x97\xe5\x86\xb0\xe6\xb4\x8b\xe5\x8d\xab\xe6\x98\x9f\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb0\xb4\xe9\x80\x8f\xe6\x98\x8e\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x8c\x97\xe5\x86\xb0\xe6\xb4\x8b\xe5\x8d\xab\xe6\x98\x9f\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe9\x9d\xa2\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x8c\x97\xe5\x86\xb0\xe6\xb4\x8b\xe5\x8d\xab\xe6\x98\x9f\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe9\x9d\xa2\xe9\xa3\x8e\xe5\x9c\xba', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe5\x8c\x97\xe6\xb5\xb7\xe6\xb5\xb7\xe6\xb4\x8b\xe8\xa7\x82\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99_\xe5\xbf\x97\xe6\x84\xbf\xe8\x88\xb9.\xe6\xb5\x81\xe9\x80\x9f', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe5\x8c\x97\xe6\xb5\xb7\xe6\xb5\xb7\xe6\xb4\x8b\xe8\xa7\x82\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99_\xe5\xbf\x97\xe6\x84\xbf\xe8\x88\xb9.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe5\x8c\x97\xe6\xb5\xb7\xe6\xb5\xb7\xe6\xb4\x8b\xe8\xa7\x82\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99_\xe5\xbf\x97\xe6\x84\xbf\xe8\x88\xb9.\xe7\x9b\x90\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe5\x8c\x97\xe6\xb5\xb7\xe6\xb5\xb7\xe6\xb4\x8b\xe8\xa7\x82\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99_\xe6\xb5\xae\xe6\xa0\x87.\xe6\xb5\x81\xe9\x80\x9f', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe5\x8c\x97\xe6\xb5\xb7\xe6\xb5\xb7\xe6\xb4\x8b\xe8\xa7\x82\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99_\xe6\xb5\xae\xe6\xa0\x87.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe5\x8c\x97\xe6\xb5\xb7\xe6\xb5\xb7\xe6\xb4\x8b\xe8\xa7\x82\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99_\xe6\xb5\xae\xe6\xa0\x87.\xe7\x9b\x90\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\xab\x99\xe6\xb0\xb4\xe5\x87\x86\xe8\x81\x94\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99.\xe6\xb0\xb4\xe4\xbd\x8d', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\xab\x99\xe6\xb0\xb4\xe5\x87\x86\xe8\x81\x94\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99.\xe6\xb5\xb7\xe5\xb9\xb3\xe9\x9d\xa2', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\xab\x99\xe6\xb0\xb4\xe5\x87\x86\xe8\x81\x94\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99.\xe6\xbd\xae\xe6\xb1\x90', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\xab\x99\xe6\xb0\xb4\xe5\x87\x86\xe8\x81\x94\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99.\xe7\xab\x99\xe7\x82\xb9', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe6\x9e\x81\xe5\x9c\xb0\xe6\xb5\xb7\xe5\x86\xb0\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe5\x8e\x9a\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe6\x9e\x81\xe5\x9c\xb0\xe6\xb5\xb7\xe5\x86\xb0\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe5\xad\xa3\xe8\x8a\x82\xe6\x80\xa7\xe5\x8f\x98\xe5\x8c\x96', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe6\x9e\x81\xe5\x9c\xb0\xe6\xb5\xb7\xe5\x86\xb0\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe6\x9e\x81\xe5\x9c\xb0\xe6\xb5\xb7\xe5\x86\xb0\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe7\xa7\xbb\xe5\x8a\xa8\xe8\xb6\x8b\xe5\x8a\xbf', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe6\xb5\xb7\xe5\x86\xb0\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe5\x8e\x9a\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe6\xb5\xb7\xe5\x86\xb0\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe7\xa7\xbb\xe5\x8a\xa8\xe8\xb6\x8b\xe5\x8a\xbf', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe6\xb5\xb7\xe5\x86\xb0\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe8\x8c\x83\xe5\x9b\xb4', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe7\xbb\xbf\xe6\xbd\xae\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe5\x88\x86\xe5\xb8\x83\xe5\x8c\xba\xe5\x9f\x9f', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe7\xbb\xbf\xe6\xbd\xae\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe7\x94\x9f\xe7\x89\xa9\xe9\x87\x8f', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe7\xbb\xbf\xe6\xbd\xae\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe8\xa6\x86\xe7\x9b\x96\xe9\x9d\xa2\xe7\xa7\xaf', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe6\xb7\xb1\xe6\xb5\xb7\xe5\x9f\xba\xe5\x9c\xb0\xe7\xae\xa1\xe7\x90\x86\xe4\xb8\xad\xe5\xbf\x83.\xe5\x9c\xb0\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe5\x9c\xb0\xe7\x82\xb9', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe6\xb7\xb1\xe6\xb5\xb7\xe5\x9f\xba\xe5\x9c\xb0\xe7\xae\xa1\xe7\x90\x86\xe4\xb8\xad\xe5\xbf\x83.\xe5\x9c\xb0\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe6\xb7\xb1\xe6\xb5\xb7\xe5\x9f\xba\xe5\x9c\xb0\xe7\xae\xa1\xe7\x90\x86\xe4\xb8\xad\xe5\xbf\x83.\xe5\x9c\xb0\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb9\xbf\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe6\xb7\xb1\xe6\xb5\xb7\xe5\x9f\xba\xe5\x9c\xb0\xe7\xae\xa1\xe7\x90\x86\xe4\xb8\xad\xe5\xbf\x83.\xe5\x9c\xb0\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe7\x9b\x90\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe6\xb7\xb1\xe6\xb5\xb7\xe5\x9f\xba\xe5\x9c\xb0\xe7\xae\xa1\xe7\x90\x86\xe4\xb8\xad\xe5\xbf\x83.\xe5\x9c\xb0\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe9\xa3\x8e\xe5\x90\x91', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe6\xb7\xb1\xe6\xb5\xb7\xe5\x9f\xba\xe5\x9c\xb0\xe7\xae\xa1\xe7\x90\x86\xe4\xb8\xad\xe5\xbf\x83.\xe5\x9c\xb0\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe9\xa3\x8e\xe9\x80\x9f', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe6\xb7\xb1\xe6\xb5\xb7\xe5\x9f\xba\xe5\x9c\xb0\xe7\xae\xa1\xe7\x90\x86\xe4\xb8\xad\xe5\xbf\x83.\xe9\xb3\x8c\xe5\xb1\xb1\xe7\xab\x99\xe6\xbd\xae\xe6\xb1\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x8f\x98\xe5\x8c\x96\xe8\xb6\x8b\xe5\x8a\xbf', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe6\xb7\xb1\xe6\xb5\xb7\xe5\x9f\xba\xe5\x9c\xb0\xe7\xae\xa1\xe7\x90\x86\xe4\xb8\xad\xe5\xbf\x83.\xe9\xb3\x8c\xe5\xb1\xb1\xe7\xab\x99\xe6\xbd\xae\xe6\xb1\x90\xe6\x95\xb0\xe6\x8d\xae.\xe6\xbd\xae\xe4\xbd\x8d\xe9\xab\x98\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\xae\x9e\xe5\x86\xb5\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x9c\xb0\xe8\xbd\xac\xe6\xb5\x81', b'LONG'], [-1, b'\xe5\xae\x9e\xe5\x86\xb5\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\xa3\xb0\xe9\x80\x9f', b'LONG'], [-1, b'\xe5\xae\x9e\xe5\x86\xb5\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\xaf\x86\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\xae\x9e\xe5\x86\xb5\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\xae\x9e\xe5\x86\xb5\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe7\x9b\x90\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\xbd\xb1\xe5\x83\x8f\xe9\x81\xa5\xe6\x84\x9f.\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7HY1C-CZI\xe5\xbd\xb1\xe5\x83\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe5\x88\x86\xe8\xbe\xa8\xe7\x8e\x87', b'LONG'], [-1, b'\xe5\xbd\xb1\xe5\x83\x8f\xe9\x81\xa5\xe6\x84\x9f.\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7HY1C-CZI\xe5\xbd\xb1\xe5\x83\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe5\xbd\xb1\xe5\x83\x8f\xe7\xb1\xbb\xe5\x9e\x8b', b'LONG'], [-1, b'\xe5\xbd\xb1\xe5\x83\x8f\xe9\x81\xa5\xe6\x84\x9f.\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7HY1C-CZI\xe5\xbd\xb1\xe5\x83\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe8\xa6\x86\xe7\x9b\x96\xe8\x8c\x83\xe5\x9b\xb4', b'LONG'], [-1, b'\xe5\xbd\xb1\xe5\x83\x8f\xe9\x81\xa5\xe6\x84\x9f.\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7\xe6\xb5\xb7\xe5\x9f\x9fMODIS\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xbd\xb1\xe5\x83\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe5\x88\x86\xe8\xbe\xa8\xe7\x8e\x87', b'LONG'], [-1, b'\xe5\xbd\xb1\xe5\x83\x8f\xe9\x81\xa5\xe6\x84\x9f.\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7\xe6\xb5\xb7\xe5\x9f\x9fMODIS\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xbd\xb1\xe5\x83\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe5\xbd\xb1\xe5\x83\x8f\xe7\xb1\xbb\xe5\x9e\x8b', b'LONG'], [-1, b'\xe5\xbd\xb1\xe5\x83\x8f\xe9\x81\xa5\xe6\x84\x9f.\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7\xe6\xb5\xb7\xe5\x9f\x9fMODIS\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xbd\xb1\xe5\x83\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe8\xa6\x86\xe7\x9b\x96\xe8\x8c\x83\xe5\x9b\xb4', b'LONG'], [-1, b'\xe6\xb5\xb7\xe5\xba\x95\xe5\x9c\xb0\xe5\xbd\xa2.2020\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe5\xba\x95\xe5\x9c\xb0\xe5\xbd\xa2\xe6\x95\xb0\xe6\x8d\xae.\xe5\x9c\xb0\xe5\xbd\xa2', b'LONG'], [-1, b'\xe6\xb5\xb7\xe5\xba\x95\xe5\x9c\xb0\xe5\xbd\xa2.2020\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe5\xba\x95\xe5\x9c\xb0\xe5\xbd\xa2\xe6\x95\xb0\xe6\x8d\xae.\xe7\xba\xac\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe5\xba\x95\xe5\x9c\xb0\xe5\xbd\xa2.2020\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe5\xba\x95\xe5\x9c\xb0\xe5\xbd\xa2\xe6\x95\xb0\xe6\x8d\xae.\xe7\xbb\x8f\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\xa3\x81\xe5\x8a\x9b\xe6\x95\xb0\xe6\x8d\xae.\xe5\xbc\xba\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\xa3\x81\xe5\x8a\x9b\xe6\x95\xb0\xe6\x8d\xae.\xe7\xba\xac\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\xa3\x81\xe5\x8a\x9b\xe6\x95\xb0\xe6\x8d\xae.\xe7\xbb\x8f\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x87\x8d\xe5\x8a\x9b\xe6\x95\xb0\xe6\x8d\xae.\xe7\xba\xac\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x87\x8d\xe5\x8a\x9b\xe6\x95\xb0\xe6\x8d\xae.\xe7\xbb\x8f\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x87\x8d\xe5\x8a\x9b\xe6\x95\xb0\xe6\x8d\xae.\xe9\x87\x8d\xe5\x8a\x9b\xe5\x8a\xa0\xe9\x80\x9f\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe9\xa9\xac\xe9\x87\x8c\xe4\xba\x9a\xe7\xba\xb3\xe6\xb5\xb7\xe6\xb2\x9f\xe6\xb5\x85\xe5\x89\x96\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe5\x8e\x9a\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe9\xa9\xac\xe9\x87\x8c\xe4\xba\x9a\xe7\xba\xb3\xe6\xb5\xb7\xe6\xb2\x9f\xe6\xb5\x85\xe5\x89\x96\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb7\xb1\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe9\xa9\xac\xe9\x87\x8c\xe4\xba\x9a\xe7\xba\xb3\xe6\xb5\xb7\xe6\xb2\x9f\xe6\xb5\x85\xe5\x89\x96\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\x89\xa9\xe8\xb4\xa8\xe7\xbb\x84\xe6\x88\x90', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe9\xa9\xac\xe9\x87\x8c\xe4\xba\x9a\xe7\xba\xb3\xe6\xb5\xb7\xe6\xb2\x9f\xe6\xb5\x85\xe5\x89\x96\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\xba\xac\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe9\xa9\xac\xe9\x87\x8c\xe4\xba\x9a\xe7\xba\xb3\xe6\xb5\xb7\xe6\xb2\x9f\xe6\xb5\x85\xe5\x89\x96\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\xbb\x8f\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x95\xe8\xb4\xa8.\xe5\xa4\x9a\xe9\x87\x91\xe5\xb1\x9e\xe7\xbb\x93\xe6\xa0\xb8\xe4\xb8\xbb\xe9\x87\x8f\xe5\x85\x83\xe7\xb4\xa0\xe6\x95\xb0\xe6\x8d\xae.\xe5\x88\x86\xe5\xb8\x83', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x95\xe8\xb4\xa8.\xe5\xa4\x9a\xe9\x87\x91\xe5\xb1\x9e\xe7\xbb\x93\xe6\xa0\xb8\xe4\xb8\xbb\xe9\x87\x8f\xe5\x85\x83\xe7\xb4\xa0\xe6\x95\xb0\xe6\x8d\xae.\xe5\x90\xab\xe9\x87\x8f', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x95\xe8\xb4\xa8.\xe6\xb2\x89\xe7\xa7\xaf\xe7\x89\xa9\xe7\xb2\x92\xe5\xba\xa6\xe6\x95\xb0\xe6\x8d\xae.\xe5\x88\x86\xe5\xb8\x83', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x95\xe8\xb4\xa8.\xe6\xb2\x89\xe7\xa7\xaf\xe7\x89\xa9\xe7\xb2\x92\xe5\xba\xa6\xe6\x95\xb0\xe6\x8d\xae.\xe7\xb2\x92\xe5\xbe\x84', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x95\xe8\xb4\xa8.\xe7\xa2\xb3\xe5\x8d\x81\xe5\x9b\x9b\xe6\xb5\x8b\xe5\xb9\xb4\xe6\x95\xb0\xe6\x8d\xae.\xe5\x90\xab\xe9\x87\x8f', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x95\xe8\xb4\xa8.\xe7\xa2\xb3\xe5\x8d\x81\xe5\x9b\x9b\xe6\xb5\x8b\xe5\xb9\xb4\xe6\x95\xb0\xe6\x8d\xae.\xe5\xb9\xb4\xe4\xbb\xa3', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe5\x9b\xbd\xe9\x99\x85\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xa4\xa7\xe6\xb0\x94\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe4\xbd\x8d\xe7\xbd\xae', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe5\x9b\xbd\xe9\x99\x85\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xa4\xa7\xe6\xb0\x94\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe5\xa4\xa9\xe6\xb0\x94\xe7\x8e\xb0\xe8\xb1\xa1', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe5\x9b\xbd\xe9\x99\x85\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xa4\xa7\xe6\xb0\x94\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe5\xb9\xb3\xe5\x8f\xb0\xe7\xb1\xbb\xe5\x9e\x8b', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe5\x9b\xbd\xe9\x99\x85\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xa4\xa7\xe6\xb0\x94\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\x95\xb0\xe6\x8d\xae\xe6\x9d\xa5\xe6\xba\x90', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe5\x9b\xbd\xe9\x99\x85\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xa4\xa7\xe6\xb0\x94\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb0\x94\xe6\xb8\xa9', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe5\x9b\xbd\xe9\x99\x85\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xa4\xa7\xe6\xb0\x94\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe9\xa3\x8e', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb5\xb7\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe4\xbd\x8d\xe7\xbd\xae', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb5\xb7\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe5\xa4\xa9\xe6\xb0\x94\xe7\x8e\xb0\xe8\xb1\xa1', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb5\xb7\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe5\xb9\xb3\xe5\x8f\xb0\xe7\xb1\xbb\xe5\x9e\x8b', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb5\xb7\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\x95\xb0\xe6\x8d\xae\xe6\x9d\xa5\xe6\xba\x90', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb5\xb7\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb0\x94\xe6\xb8\xa9', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb5\xb7\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe9\xa3\x8e', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb8\x94\xe8\x88\xb9\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe4\xbd\x8d\xe7\xbd\xae', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb8\x94\xe8\x88\xb9\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe5\xa4\xa9\xe6\xb0\x94\xe7\x8e\xb0\xe8\xb1\xa1', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb8\x94\xe8\x88\xb9\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe5\xb9\xb3\xe5\x8f\xb0\xe7\xb1\xbb\xe5\x9e\x8b', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb8\x94\xe8\x88\xb9\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\x95\xb0\xe6\x8d\xae\xe6\x9d\xa5\xe6\xba\x90', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb8\x94\xe8\x88\xb9\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb0\x94\xe6\xb8\xa9', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb8\x94\xe8\x88\xb9\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe9\xa3\x8e', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\xb4\xe6\x96\x87.\xe4\xb8\xad\xe5\x9b\xbd\xe5\x8f\xb0\xe7\xab\x99\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb0\xb4\xe4\xbd\x8d', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\xb4\xe6\x96\x87.\xe4\xb8\xad\xe5\x9b\xbd\xe5\x8f\xb0\xe7\xab\x99\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb3\xa2\xe6\xb5\xaa', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\xb4\xe6\x96\x87.\xe4\xb8\xad\xe5\x9b\xbd\xe5\x8f\xb0\xe7\xab\x99\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\xb4\xe6\x96\x87.\xe4\xb8\xad\xe5\x9b\xbd\xe5\x8f\xb0\xe7\xab\x99\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe7\x9b\x90\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\xb4\xe6\x96\x87.\xe4\xb8\xad\xe5\x9b\xbd\xe6\x9c\x88\xe5\xb9\xb3\xe5\x9d\x87\xe6\xb0\xb4\xe4\xbd\x8d\xe5\xbb\xb6\xe6\x97\xb6\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb0\xb4\xe4\xbd\x8d', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\xb4\xe6\x96\x87.\xe6\xb3\xa2\xe6\xb5\xaa\xe5\x92\x8c\xe9\xa3\x8e\xe5\x9c\xba\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb3\xa2\xe6\xb5\xaa', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\xb4\xe6\x96\x87.\xe6\xb3\xa2\xe6\xb5\xaa\xe5\x92\x8c\xe9\xa3\x8e\xe5\x9c\xba\xe6\x95\xb0\xe6\x8d\xae.\xe9\xa3\x8e\xe5\x9c\xba', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\xb4\xe6\x96\x87.\xe6\xb5\xb7\xe8\xa1\xa8\xe9\x9d\xa2\xe5\x8e\x8b\xe5\xbc\xba.\xe5\x8e\x8b\xe5\xbc\xba', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe7\x94\x9f\xe7\x89\xa9.\xe6\x97\xa5\xe6\x9c\xac\xe4\xb8\x9c\xe9\x83\xa8\xe6\x97\xb6\xe5\xba\x8f\xe7\xab\x99\xe6\xb5\xb7\xe6\xb4\x8b\xe7\x94\x9f\xe7\x89\xa9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\x94\x9f\xe7\x89\xa9\xe7\xb1\xbb\xe5\x9e\x8b', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe7\x94\x9f\xe7\x89\xa9.\xe6\xbe\xb3\xe5\xa4\xa7\xe5\x88\xa9\xe4\xba\x9a\xe6\xb5\xb7\xe6\xb4\x8b\xe8\xa7\x82\xe6\xb5\x8b\xe7\xbb\xbc\xe5\x90\x88\xe7\xb3\xbb\xe7\xbb\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe7\x94\x9f\xe7\x89\xa9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\x94\x9f\xe7\x89\xa9\xe7\xb1\xbb\xe5\x9e\x8b', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe7\x94\x9f\xe7\x89\xa9.\xe7\xbe\x8e\xe5\x9b\xbd\xe5\x9b\xbd\xe5\xae\xb6\xe8\xbf\x91\xe5\xb2\xb8\xe6\xb5\xb7\xe6\xb4\x8b\xe7\xa7\x91\xe5\xad\xa6\xe4\xb8\xad\xe5\xbf\x83\xe6\xb5\xb7\xe6\xb4\x8b\xe7\x94\x9f\xe7\x89\xa9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\x94\x9f\xe7\x89\xa9\xe7\xb1\xbb\xe5\x9e\x8b', b'LONG'], [-1, b'\xe7\x9f\xa2\xe9\x87\x8f\xe5\x9c\xb0\xe5\x9b\xbe\xe6\x95\xb0\xe6\x8d\xae.\xe5\x85\xac\xe8\xb7\xaf', b'LONG'], [-1, b'\xe7\x9f\xa2\xe9\x87\x8f\xe5\x9c\xb0\xe5\x9b\xbe\xe6\x95\xb0\xe6\x8d\xae.\xe5\xb1\x85\xe6\xb0\x91\xe5\x9c\xb0', b'LONG'], [-1, b'\xe7\x9f\xa2\xe9\x87\x8f\xe5\x9c\xb0\xe5\x9b\xbe\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb0\xb4\xe7\xb3\xbb', b'LONG'], [-1, b'\xe7\x9f\xa2\xe9\x87\x8f\xe5\x9c\xb0\xe5\x9b\xbe\xe6\x95\xb0\xe6\x8d\xae.\xe9\x93\x81\xe8\xb7\xaf', b'LONG'], [-1, b'\xe7\xa7\x91\xe6\x8a\x80\xe5\x9f\xba\xe7\xa1\x80\xe8\xb5\x84\xe6\xba\x90\xe8\xb0\x83\xe6\x9f\xa5\xe4\xb8\x93\xe9\xa1\xb9.\xe7\xac\xac\xe4\xb8\x80\xe6\x89\xbf\xe5\xbb\xba\xe5\x8d\x95\xe4\xbd\x8d', b'LONG'], [-1, b'\xe7\xa7\x91\xe6\x8a\x80\xe5\x9f\xba\xe7\xa1\x80\xe8\xb5\x84\xe6\xba\x90\xe8\xb0\x83\xe6\x9f\xa5\xe4\xb8\x93\xe9\xa1\xb9.\xe9\xa1\xb9\xe7\x9b\xae\xe5\x90\x8d\xe7\xa7\xb0', b'LONG'], [-1, b'\xe7\xa7\x91\xe6\x8a\x80\xe5\x9f\xba\xe7\xa1\x80\xe8\xb5\x84\xe6\xba\x90\xe8\xb0\x83\xe6\x9f\xa5\xe4\xb8\x93\xe9\xa1\xb9.\xe9\xa1\xb9\xe7\x9b\xae\xe6\x9d\xa5\xe6\xba\x90', b'LONG'], [-1, b'\xe7\xa7\x91\xe6\x8a\x80\xe5\x9f\xba\xe7\xa1\x80\xe8\xb5\x84\xe6\xba\x90\xe8\xb0\x83\xe6\x9f\xa5\xe4\xb8\x93\xe9\xa1\xb9.\xe9\xa1\xb9\xe7\x9b\xae\xe7\xbc\x96\xe5\x8f\xb7', b'LONG'], [-1, b'\xe7\xa7\x91\xe6\x8a\x80\xe5\x9f\xba\xe7\xa1\x80\xe8\xb5\x84\xe6\xba\x90\xe8\xb0\x83\xe6\x9f\xa5\xe4\xb8\x93\xe9\xa1\xb9.\xe9\xa1\xb9\xe7\x9b\xae\xe9\xaa\x8c\xe6\x94\xb6\xe8\xaf\x81\xe6\x98\x8e', b'LONG'], [-1, b'\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x8f\x98\xe5\x8c\x96\xe8\xb6\x8b\xe5\x8a\xbf', b'LONG'], [-1, b'\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc', b'LONG'], [-1, b'\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb8\xa9\xe5\xba\xa6\xe7\xbb\x9f\xe8\xae\xa1\xe6\x95\xb0\xe6\x8d\xae.\xe5\x8f\x98\xe5\x8c\x96\xe8\xb6\x8b\xe5\x8a\xbf', b'LONG'], [-1, b'\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb8\xa9\xe5\xba\xa6\xe7\xbb\x9f\xe8\xae\xa1\xe6\x95\xb0\xe6\x8d\xae.\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc', b'LONG'], [-1, b'\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\x9b\x90\xe5\xba\xa6\xe7\xbb\x9f\xe8\xae\xa1\xe6\x95\xb0\xe6\x8d\xae.\xe5\x8f\x98\xe5\x8c\x96\xe8\xb6\x8b\xe5\x8a\xbf', b'LONG'], [-1, b'\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\x9b\x90\xe5\xba\xa6\xe7\xbb\x9f\xe8\xae\xa1\xe6\x95\xb0\xe6\x8d\xae.\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc', b'LONG'], [-1, b'\xe9\x87\x8d\xe7\x82\xb9\xe7\xa0\x94\xe5\x8f\x91\xe8\xae\xa1\xe5\x88\x92.\xe7\xac\xac\xe4\xb8\x80\xe6\x89\xbf\xe5\xbb\xba\xe5\x8d\x95\xe4\xbd\x8d', b'LONG'], [-1, b'\xe9\x87\x8d\xe7\x82\xb9\xe7\xa0\x94\xe5\x8f\x91\xe8\xae\xa1\xe5\x88\x92.\xe9\xa1\xb9\xe7\x9b\xae\xe5\x90\x8d\xe7\xa7\xb0', b'LONG'], [-1, b'\xe9\x87\x8d\xe7\x82\xb9\xe7\xa0\x94\xe5\x8f\x91\xe8\xae\xa1\xe5\x88\x92.\xe9\xa1\xb9\xe7\x9b\xae\xe6\x9d\xa5\xe6\xba\x90', b'LONG'], [-1, b'\xe9\x87\x8d\xe7\x82\xb9\xe7\xa0\x94\xe5\x8f\x91\xe8\xae\xa1\xe5\x88\x92.\xe9\xa1\xb9\xe7\x9b\xae\xe7\xbc\x96\xe5\x8f\xb7', b'LONG'], [-1, b'\xe9\x87\x8d\xe7\x82\xb9\xe7\xa0\x94\xe5\x8f\x91\xe8\xae\xa1\xe5\x88\x92.\xe9\xa1\xb9\xe7\x9b\xae\xe9\xaa\x8c\xe6\x94\xb6\xe8\xaf\x81\xe6\x98\x8e', b'LONG'], [-1, b'\xe9\xa3\x8e\xe7\x94\xb5\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe4\xbd\x8d\xe7\xbd\xae', b'LONG'], [-1, b'\xe9\xa3\x8e\xe7\x94\xb5\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe5\x8f\x91\xe7\x94\xb5\xe9\x87\x8f', b'LONG'], [-1, b'\xe9\xa3\x8e\xe7\x94\xb5\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb6\xa1\xe8\xbd\xae\xe6\x9c\xba\xe5\x9e\x8b\xe5\x8f\xb7', b'LONG'], [-1, b'\xe9\xa3\x8e\xe7\x94\xb5\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb6\xa1\xe8\xbd\xae\xe6\x9c\xba\xe6\x95\xb0\xe9\x87\x8f', b'LONG'], [-1, b'\xe9\xa3\x8e\xe7\x94\xb5\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe9\xa3\x8e\xe9\x80\x9f', b'LONG']]
# # 执行
# udf = UDFStoreEmbedding()
# result = udf.transform(data, None, None)
# for row in result:
#     decoded_row = [col.decode('utf-8') if isinstance(col, bytes) else col for col in row]
#     print(decoded_row)